diff --git a/src/main/scala/rocket/RocketCore.scala b/src/main/scala/rocket/RocketCore.scala
index afde776..c857877 100644
--- a/src/main/scala/rocket/RocketCore.scala
+++ b/src/main/scala/rocket/RocketCore.scala
@@ -728,12 +728,12 @@ class Rocket(implicit p: Parameters) extends CoreModule()(p)
          csr.io.trace(0).insn, csr.io.trace(0).insn)
   }
 
-  val max_core_cycles = PlusArg("max-core-cycles",
-    default = 0,
-    docstring = "Kill the emulation after INT rdtime cycles. Off if 0.")
-  when (max_core_cycles > UInt(0)) {
-    assert (csr.io.time < max_core_cycles, "Maximum Core Cycles reached.")
-  }
+  //val max_core_cycles = PlusArg("max-core-cycles",
+  //  default = 0,
+  //  docstring = "Kill the emulation after INT rdtime cycles. Off if 0.")
+  //when (max_core_cycles > UInt(0)) {
+  //  assert (csr.io.time < max_core_cycles, "Maximum Core Cycles reached.")
+  //}
 
   def checkExceptions(x: Seq[(Bool, UInt)]) =
     (x.map(_._1).reduce(_||_), PriorityMux(x))
diff --git a/src/main/scala/tilelink/Monitor.scala b/src/main/scala/tilelink/Monitor.scala
index 6a795e6..f2e1070 100644
--- a/src/main/scala/tilelink/Monitor.scala
+++ b/src/main/scala/tilelink/Monitor.scala
@@ -442,9 +442,9 @@ class TLMonitor(args: TLMonitorArgs) extends TLMonitorBase(args)
     inflight := (inflight | a_set) & ~d_clr
 
     val watchdog = RegInit(UInt(0, width = 32))
-    val limit = PlusArg("tilelink_timeout",
-      docstring="Kill emulation after INT waiting TileLink cycles. Off if 0.")
-    assert (!inflight.orR || limit === UInt(0) || watchdog < limit, "TileLink timeout expired" + extra)
+    //val limit = PlusArg("tilelink_timeout",
+    //  docstring="Kill emulation after INT waiting TileLink cycles. Off if 0.")
+    //assert (!inflight.orR || limit === UInt(0) || watchdog < limit, "TileLink timeout expired" + extra)
 
     watchdog := watchdog + UInt(1)
     when (bundle.a.fire() || bundle.d.fire()) { watchdog := UInt(0) }
diff --git a/src/main/scala/util/AsyncResetReg.scala b/src/main/scala/util/AsyncResetReg.scala
index 2241983..f3c7090 100644
--- a/src/main/scala/util/AsyncResetReg.scala
+++ b/src/main/scala/util/AsyncResetReg.scala
@@ -30,15 +30,13 @@ import Chisel._
   *  
   */
 
-class AsyncResetReg extends BlackBox {
+class AsyncResetReg extends Module {
   val io = new Bundle {
     val d = Bool(INPUT)
     val q = Bool(OUTPUT)
     val en = Bool(INPUT)
-
-    val clk = Clock(INPUT)
-    val rst = Bool(INPUT)
   }
+  io.q := RegEnable(io.d, Bool(false), io.en)
 }
 
 class SimpleRegIO(val w: Int) extends Bundle{
@@ -54,8 +52,8 @@ class AsyncResetRegVec(val w: Int, val init: BigInt) extends Module {
 
   val q = for ((reg, idx) <- async_regs.zipWithIndex) yield {
     def maybeInvert(x: Bool) = if (((init >> idx) & 1) == 1) !x else x
-    reg.io.clk := clock
-    reg.io.rst := reset
+    //reg.io.clk := clock
+    //reg.io.rst := reset
     reg.io.d   := maybeInvert(io.d(idx))
     reg.io.en  := io.en
     reg.suggestName(s"reg_$idx")
@@ -74,8 +72,8 @@ object AsyncResetReg {
     def maybeInvert(x: Bool) = if (init) !x else x
     val reg = Module(new AsyncResetReg)
     reg.io.d := maybeInvert(d)
-    reg.io.clk := clk
-    reg.io.rst := rst
+    //reg.io.clk := clk
+    //reg.io.rst := rst
     reg.io.en  := Bool(true)
     name.foreach(reg.suggestName(_))
     maybeInvert(reg.io.q)
